#!/usr/bin/env python3

# Development before 2024 Copyright (C) Then Try This and University of Exeter
# Development from 2024 Copyright (C) University of Exeter

# This program is free software: you can redistribute it and/or modify
# it under the terms of the Common Good Public License Beta 1.0 as
# published at http://www.cgpl.org

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# Common Good Public License Beta 1.0 for more details.

# This script creates a command line interface for building and updating
# the climate tool database.

import yaml
import sys
from builder import climate_db
from builder import link_geom_climate
from builder import tiff_loader
from builder import cache_climate


def load_config():
    with open("config.yml") as f:
        return yaml.load(f, Loader=yaml.FullLoader)


conf = load_config()
db = climate_db.db(conf)

# all tables should be dropped and recreated when rerunning commands

if len(sys.argv) < 2 or sys.argv[1] == "-?" or sys.argv[1] == "--help":
    print("Welcome to the climate tool database builder")
else:

    # load boundaries --------------------------------------------------------

    if sys.argv[1] == "boundary_uk_counties":
        db.load_shp_geom(conf["uk_counties_data_shp"], "boundary_uk_counties", "27700")

    if sys.argv[1] == "boundary_la_districts":
        db.load_shp_geom(conf["la_districts_data_shp"], "boundary_la_districts", "27700")

    if sys.argv[1] == "boundary_parishes":
        db.load_shp_geom(conf["parishes_data_shp"], "boundary_parishes", "27700")

    if sys.argv[1] == "boundary_lsoa":
        db.load_shp_geom(conf["lsoa_data_shp"], "boundary_lsoa", "27700")

    if sys.argv[1] == "boundary_msoa":
        db.load_shp_geom(conf["msoa_data_shp"], "boundary_msoa", "27700")

    if sys.argv[1] == "boundary_sc_dz":
        db.load_shp_geom(conf["sc_dz_data_shp"], "boundary_sc_dz", "27700")

    # climate/boundary --------------------------------------------------------

    if sys.argv[1] == "link_lsoa":
        link_geom_climate.multi_clever(db, "boundary_lsoa", "chess_scape_grid")

    if sys.argv[1] == "link_msoa":
        link_geom_climate.multi_clever(db, "boundary_msoa", "chess_scape_grid")

    if sys.argv[1] == "link_uk_counties":
        link_geom_climate.multi_clever(db, "boundary_uk_counties", "chess_scape_grid")

    if sys.argv[1] == "link_la_districts":
        link_geom_climate.multi_clever(db, "boundary_la_districts", "chess_scape_grid")

    if sys.argv[1] == "link_sc_dz":
        link_geom_climate.multi_clever(db, "boundary_sc_dz", "chess_scape_grid")

    if sys.argv[1] == "link_parishes":
        link_geom_climate.multi_clever(db, "boundary_parishes", "chess_scape_grid")

    if sys.argv[1] == "cache_all_climate":
        for boundary in [
            "boundary_parishes",
            "boundary_la_districts",
            "boundary_uk_counties",
            "boundary_msoa",
            "boundary_sc_dz",
            "boundary_lsoa",
        ]:
            for climate in [
                "chess_scape_rcp85_annual",
                "chess_scape_rcp85_summer",
                "chess_scape_rcp85_winter",
                "chess_scape_rcp60_annual",
                "chess_scape_rcp60_summer",
                "chess_scape_rcp60_winter",
            ]:
                cache_climate.cache_climate(db, boundary, climate)

    # climate ----------------------------------------------------------------

    if sys.argv[1] == "chess_tif_grid":
        tiff_loader.import_grid(db, conf["chess_tiff_decades_path"], sys.argv[2])

    if sys.argv[1] == "chess_tif_print_crs":
        tiff_loader.print_crs(sys.argv[2])

    if sys.argv[1] == "chess_tiff_nuke":
        for rcp in ["rcp60", "rcp85"]:
            for season in ["annual", "summer", "winter"]:
                tiff_loader.nuke(db, "chess_scape_" + rcp + "_" + season)

    if sys.argv[1] == "chess_tiff_create":
        tiff_loader.create_averages(db, sys.argv[2], conf["chess_tiff_path"], sys.argv[3])

    if sys.argv[1] == "chess_tiff_create_batch":
        for rcp in ["rcp60", "rcp85"]:
            for variable in ["tas", "pr", "rsds", "sfcWind"]:
                tiff_loader.create_averages(db, rcp, conf["chess_tiff_path"], variable)

    if sys.argv[1] == "chess_tiff_import":
        for rcp in ["rcp60", "rcp85"]:
            for variable in ["tas", "pr", "rsds", "sfcWind"]:
                tiff_loader.import_tiffs(db, conf["chess_tiff_decades_path"], rcp, variable)
